#lang racket
(define Game_name "example")

(require racket/gui/base)



(define state 0)

;; On a timer tick, increment the state, and refresh the canvas.
;; tick!: -> void
(define (tick!)
  (set! state (add1 state))
  (send MAIN-CANVAS refresh))


;; When a canvas paints itself, use the following:
;; paint: canvas% dc<%> -> void
(define (paint! a-canvas dc)
  (send dc set-background (make-object color% 0 0 0))
  (send dc clear)
  (draw-enteties (send *current-act* get-draw-structure))
  (define (draw-entetises stucture)
    (define (draw-level level)
      
    (if (null? stucture)
        (void)
        (begin
          (draw-level (car structure))
          (draw-enteties (cdr structure)))))
  
  )


;; Here, we initialize our graphical application.  We create a window frame...
;; THE-FRAME: frame%
(define MAIN-FRAME (new (class frame%
                          (super-new)
                          (define/augment (on-close)
                            (custodian-shutdown-all (current-custodian))))
                        [width 800]
                        [height 600]
                        [label Game_name]))


;; and add a canvas into it.
;; THE-CANVAS: canvas%
(define MAIN-CANVAS (new (class canvas%
                           (super-new)
                           
                           ;; We define a key handler.  Let's have it so it
                           ;; resets the counter on a key press
                           ;;(define/override (on-char key-event)
                           ;;(key-handler)   
                           )[parent MAIN-FRAME]
                            [paint-callback paint!]))

;; We get the frame to show on screen:
(send MAIN-FRAME show #t)

;; Finally, we set up a timer that will call tick! on every second.
(define MAIN-TIMER (new timer% 
                        [notify-callback tick!]
                        [interval 1000]))
